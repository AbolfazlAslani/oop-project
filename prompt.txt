User
package app;

import java.util.Map;

import javax.xml.crypto.Data;

import utils.DataAppender;
import utils.SystemClear;
import utils.Retrievers.PersonRetriever;
import utils.editors.PersonEditor;

import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.io.PrintWriter;

public class HumanResources extends Resources {
    private String name;
    private String lastname;
    private String ssn;
    private String age;
    private String address;
    private String job;
    private String sex;
    private String nation;

    public HumanResources(String name, String lastname, String ssn, String city, String age, String address,
            String job, String sex, String nation) {
        super(city);
        this.ssn = ssn;
        this.name = name;
        this.lastname = lastname;
        this.address = address;
        this.job = job;
        this.age = age;
        this.sex = sex;
        this.nation = nation;

    }

    public void submit() {

        Map<String, String> dataObject = new HashMap<String, String>();
        dataObject.put("ssn", this.ssn);
        dataObject.put("name", this.name);
        dataObject.put("lastname", this.lastname);
        dataObject.put("city", Resources.city);
        dataObject.put("age", this.age);
        dataObject.put("address", this.address);
        dataObject.put("job", this.job);
        dataObject.put("sex", this.sex);
        dataObject.put("nation", this.nation);

        String filePath = "database/user.txt";

        try {
            DataAppender files = new DataAppender(dataObject, filePath, "=");
        } catch (IOException e) {
            System.err.println("An error occurred while writing the map to a file: " + e.getMessage());
        }

    }

    public void edit() {

        Map<String, String> dataObject = new HashMap<String, String>();
        dataObject.put("ssn", this.ssn);
        dataObject.put("name", this.name);
        dataObject.put("lastname", this.lastname);
        dataObject.put("city", Resources.city);
        dataObject.put("age", this.age);
        dataObject.put("address", this.address);
        dataObject.put("job", this.job);
        dataObject.put("sex", this.sex);
        dataObject.put("nation", this.nation);

        try {
            PersonEditor.editPerson(ssn, dataObject);
            System.out.println("Person data updated successfully.");
        } catch (IOException e) {
            System.out.println("Error updating person data: " + e.getMessage());
        }

    }

}


package app;

import java.util.Map;

import javax.xml.crypto.Data;

import utils.DataAppender;
import utils.editors.NatureEditor;
import utils.editors.PersonEditor;

import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.io.PrintWriter;

public class NatureResources extends Resources {
    private String animal_type;
    private String plant_type;
    private String lands;
    private String country;
    private String area;
    private String ssn;
    private String city;

    public NatureResources(String animal_type, String plant_type, String lands, String country, String area,
            String ssn,
            String city) {
        super(city);
        this.animal_type = animal_type;
        this.plant_type = plant_type;
        this.lands = lands;
        this.country = country;
        this.area = area;
        this.ssn = ssn;
    }

    public void submit() {

        Map<String, String> dataObject = new HashMap<String, String>();
        dataObject.put("ssn", this.ssn);
        dataObject.put("animal_type", this.animal_type);
        dataObject.put("plant_type", this.plant_type);
        dataObject.put("city", Resources.city);
        dataObject.put("land", this.lands);
        dataObject.put("country", this.country);
        dataObject.put("area", this.area);

        String filePath = "database/lands.txt";

        try {
            DataAppender files = new DataAppender(dataObject, filePath, "=");
        } catch (IOException e) {
            System.err.println("An error occurred while writing the map to a file: " + e.getMessage());
        }

    }

    public void edit() {

        Map<String, String> dataObject = new HashMap<String, String>();
        dataObject.put("ssn", this.ssn);
        dataObject.put("animal_type", this.animal_type);
        dataObject.put("plant_type", this.plant_type);
        dataObject.put("city", Resources.city);
        dataObject.put("land", this.lands);
        dataObject.put("country", this.country);
        dataObject.put("area", this.area);

        String filePath = "database/lands.txt";

        try {
            NatureEditor.editNature(ssn, dataObject);
            System.out.println("Person data updated successfully.");
        } catch (IOException e) {
            System.out.println("Error updating person data: " + e.getMessage());
        }

    }

}


package app;

import java.util.Map;

import utils.DataCollector;
import utils.DateOfDeathAdder;
import utils.SystemClear;
import utils.Retrievers.NatureRetriever;
import utils.Retrievers.PersonRetriever;

import java.util.HashMap;
import java.util.List;
import java.io.FileWriter;
import java.io.IOException;

public class Resources {
    public static String city;

    public Resources(String city) {
        Resources.city = city;
    }

    public static void create(Map<String, String> data) {

    }

    public static void findHumanResources(String ssn) {
        try {
            Map<String, String> personData = PersonRetriever.retrievePersonData(ssn);
            if (!personData.isEmpty()) {
                // * Clears the command prompt \
                SystemClear.main();
                System.out.println("====================================================");
                System.out.println("Person data found:");
                for (Map.Entry<String, String> entry : personData.entrySet()) {
                    System.out.println(entry.getKey() + "=" + entry.getValue());
                }
            } else {
                System.out.println("Person data not found for the given SSN.");
            }
        } catch (IOException e) {
            System.out.println("Error retrieving person data: " + e.getMessage());
        }

    }

    public static void findNatureResources(String ssn) {
        try {
            Map<String, String> personData = NatureRetriever.retrievePersonData(ssn);
            if (!personData.isEmpty()) {
                // * Clears the command prompt \
                SystemClear.main();
                System.out.println("====================================================");
                System.out.println("Your data found:");
                for (Map.Entry<String, String> entry : personData.entrySet()) {
                    System.out.println(entry.getKey() + "=" + entry.getValue());
                }
            } else {
                System.out.println("Person data not found for the given SSN.");
            }
        } catch (IOException e) {
            System.out.println("Error retrieving person data: " + e.getMessage());
        }

    }

    public static void HumanResourceDeathSubmittion(String ssn, String deathDate) {

        try {
            DateOfDeathAdder.addDateOfDeath(ssn, deathDate);
        } catch (IOException e) {
            System.out.println("Error adding date of death: " + e.getMessage());
        }

    }

    public static void RandomHumanResourceCreator(int counter) {

        List<String> fileNames = List.of(
                "address",
                "age",
                "city",
                "job",
                "lastname",
                "name",
                "nation",
                "sex",
                "ssn");

        try {
            for (int i = 0; i < counter; i++) {
                List<String> randomDataList = DataCollector.collectRandomDataFromFiles(fileNames);
                HumanResources randomData = new HumanResources(randomDataList.get(5), randomDataList.get(4),
                        randomDataList.get(8), randomDataList.get(2), randomDataList.get(1), randomDataList.get(0),
                        randomDataList.get(3), randomDataList.get(7), randomDataList.get(6));
                randomData.submit();

            }

        } catch (IOException e) {
            System.out.println("Error collecting random data: " + e.getMessage());
        }
    }
}


package app;

import utils.DataCollector;
import utils.DateOfDeathAdder;
import utils.DuplicateSsn;
import utils.Retrievers.PersonRetriever;
import utils.editors.PersonEditor;

import java.util.Map;

import menu.Intro;
import statistics.AgeCounter;
import statistics.DeathCounter;
import statistics.GenderBlockRetriever;

import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.io.FileReader;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.PrintWriter;

public class Welcome {

    public static void main(String[] args) {
        Intro.mainMenu();
    }

}


package menu;

import app.HumanResources;
import app.Resources;
import utils.DuplicateSsn;
import utils.*;

import java.io.IOException;
import java.util.Scanner;

public class HumanResourceMenu {
    public static void createHumanResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter SSN : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.checker(ssn);
        // * SSN Is Validated Here
        if (checker) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("SSN Already Exists;");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                createHumanResource();
            } else {
                Intro.mainMenu();
            }
        }
        System.out.println("Please Enter Name : ");
        String name = sc.nextLine();
        System.out.println("Please Enter Lastname : ");
        String lastname = sc.nextLine();
        System.out.println("Please Enter City : ");
        String city = sc.nextLine();
        System.out.println("Please Enter Address : ");
        String Address = sc.nextLine();
        System.out.println("Please Enter Job : ");
        String Job = sc.nextLine();
        System.out.println("Please Enter Age : ");
        String Age = sc.nextLine();
        System.out.println("Please Enter Sex : ");
        String sex = sc.nextLine();
        System.out.println("Please Enter Nation : ");
        String nation = sc.nextLine();
        HumanResources newPerson = new HumanResources(name, lastname, ssn, city, Age, Address, Job, sex, nation);
        newPerson.submit();
        System.out.println("Your Data Submitted Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void editHumanResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter SSN : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.checker(ssn);
        // * SSN Is Validated Here
        if (checker == false) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Cannot Find SSN");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                editHumanResource();
            } else {
                Intro.mainMenu();
            }
        }
        System.out.println("Please Edit Name : ");
        String name = sc.nextLine();
        System.out.println("Please Edit Lastname : ");
        String lastname = sc.nextLine();
        System.out.println("Please Edit City : ");
        String city = sc.nextLine();
        System.out.println("Please Edit Address : ");
        String Address = sc.nextLine();
        System.out.println("Please Edit Job : ");
        String Job = sc.nextLine();
        System.out.println("Please Edit Age : ");
        String Age = sc.nextLine();
        System.out.println("Please Edit Sex : ");
        String sex = sc.nextLine();
        System.out.println("Please Edit Nation : ");
        String nation = sc.nextLine();
        HumanResources newPerson = new HumanResources(name, lastname, ssn, city, Age, Address, Job, sex, nation);
        newPerson.edit();
        System.out.println("Your Data Edited Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void findHumanResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter SSN : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.checker(ssn);
        // * SSN Is Validated Here
        if (checker == false) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Cannot Find SSN");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                findHumanResource();
            } else {
                Intro.mainMenu();
            }
        }
        Resources.findHumanResources(ssn);
        System.out.println("====================================================");
        System.out.println("Your Data Found Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void submitDeath() {

        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter SSN : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.checker(ssn);
        // * SSN Is Validated Here
        if (checker == false) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Cannot Find SSN");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                submitDeath();
            } else {
                Intro.mainMenu();
            }
        }
        System.out.println("Enter The Date Of Death : eg. 1399/02/25");
        System.out.print(": ");
        String dateofDeath = sc.nextLine();
        Resources.HumanResourceDeathSubmittion(ssn, dateofDeath);
        System.out.println("====================================================");
        System.out.println("Death Has Been Added To The Block");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void randomHuman() {
        Scanner sc = new Scanner(System.in);
        SystemClear.main();
        System.out.println("==================================================================");
        System.out.println("Enter The Amount Of Random Human Resources You Want To Create : ");
        System.out.println("Enter Between 0 > 200");
        System.out.print("Select : ");
        int count = sc.nextInt();
        if (count <= 200 & count >= 0) {
            Resources.RandomHumanResourceCreator(count);
            SystemClear.main();
            System.out.println("=============================");
            System.out.println("You Have Create " + count + " Amount of Data");

        } else {
            SystemClear.main();

            System.out.println("=================================================");
            System.out.println("Invalid Value !");
            System.out.println("1.Try Again");
            System.out.println("2.Exit");
            int selector = sc.nextInt();
            if (selector == 1) {
                randomHuman();
            } else {
                Intro.mainMenu();
            }

        }

        sc.close();

    }

}


package menu;

import app.HumanResources;
import utils.DuplicateSsn;
import utils.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import java.util.Scanner;

public class Intro {
    public static void mainMenu() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Welcome To The Nature $ Human Resources Program ! ");
        System.out.println("1.Resources");
        System.out.println("2.Create Random Resources");
        System.out.println("3.Statistic Reports");
        System.out.print("Select : ");
        int answer = sc.nextInt();
        if (answer == 1) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("1.Human Resources");
            System.out.println("2.Nature Resources");
            System.out.print("Select : ");
            int secanswer = sc.nextInt();
            if (secanswer == 1) {
                // * Clears the command prompt \

                SystemClear.main();
                System.out.println("====================================================");

                System.out.println("1.Create New Resource");
                System.out.println("2.Edit Resources");
                System.out.println("3.Submit Death");
                System.out.println("4.Search");
                System.out.print("Select : ");
                int thirdanswer = sc.nextInt();
                if (thirdanswer == 1) {
                    HumanResourceMenu.createHumanResource();
                } else if (thirdanswer == 2) {
                    HumanResourceMenu.editHumanResource();
                } else if (thirdanswer == 3) {
                    HumanResourceMenu.submitDeath();
                } else {
                    HumanResourceMenu.findHumanResource();
                }

            } else {
                // * Clears the command prompt \

                SystemClear.main();
                System.out.println("====================================================");

                System.out.println("1.Create New Resource");
                System.out.println("2.Edit Resources");
                System.out.println("3.Search");
                System.out.print("Select : ");
                int thirdanswer = sc.nextInt();
                if (thirdanswer == 1) {
                    NatureResourceMenu.createNatureResource();
                } else if (thirdanswer == 2) {
                    NatureResourceMenu.editNatureResource();
                } else {
                    NatureResourceMenu.findNatureResource();
                }

            }
        } else if (answer == 2) {
            HumanResourceMenu.randomHuman();
        } else {
            StatisticsDataMenu.statisticsMainMenu();
        }
        sc.close();

    }

}


package menu;

import app.HumanResources;
import app.NatureResources;
import app.Resources;
import utils.DuplicateSsn;
import utils.*;

import java.util.Scanner;

public class NatureResourceMenu {
    public static void createNatureResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter Code : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.codeChecker(ssn);
        // * Code Is Validated Here
        if (checker) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Code Already Exists;");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                createNatureResource();
            } else {
                Intro.mainMenu();
            }
        }
        System.out.println("Please Enter animal Type : ");
        String animal_type = sc.nextLine();
        System.out.println("Please Enter plant type : ");
        String plant_type = sc.nextLine();
        System.out.println("Please Enter City : ");
        String city = sc.nextLine();
        System.out.println("Please Enter land name : ");
        String lands = sc.nextLine();
        System.out.println("Please Enter Country : ");
        String country = sc.nextLine();
        System.out.println("Please Enter Area name : ");
        String Area = sc.nextLine();
        NatureResources newNature = new NatureResources(animal_type, plant_type, lands, country, Area, ssn, city);
        newNature.submit();
        System.out.println("Your Data Submitted Succesfully ! ");

        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void editNatureResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter Code : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.codeChecker(ssn);
        // * Code Is Validated Here
        if (checker == false) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Cannot Find Code");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                editNatureResource();
            } else {
                Intro.mainMenu();
            }
        }
        System.out.println("Please Enter animal Type : ");
        String animal_type = sc.nextLine();
        System.out.println("Please Enter plant type : ");
        String plant_type = sc.nextLine();
        System.out.println("Please Enter City : ");
        String city = sc.nextLine();
        System.out.println("Please Enter land name : ");
        String lands = sc.nextLine();
        System.out.println("Please Enter Country : ");
        String country = sc.nextLine();
        System.out.println("Please Enter Area name : ");
        String Area = sc.nextLine();
        NatureResources newNature = new NatureResources(animal_type, plant_type, lands, country, Area, ssn, city);
        newNature.edit();
        System.out.println("Your Data Edited Succesfully ! ");

        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    public static void findNatureResource() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("Please Enter Code : ");
        String ssn = sc.nextLine();
        Boolean checker = DuplicateSsn.codeChecker(ssn);
        // * SSN Is Validated Here
        if (checker == false) {
            // * Clears the command prompt \

            SystemClear.main();
            System.out.println("====================================================");

            System.out.println("Cannot Find Code");
            System.out.println("1.Try Again");
            System.out.println("2.Main Menu");
            int javab = sc.nextInt();
            if (javab == 1) {
                findNatureResource();
            } else {
                Intro.mainMenu();
            }
        }
        Resources.findNatureResources(ssn);
        System.out.println("====================================================");
        System.out.println("Your Data Found Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

}


package menu;

import java.util.List;
import java.util.Scanner;

import statistics.AgeCounter;
import statistics.DeathCounter;
import statistics.GenderBlockRetriever;
import utils.SystemClear;

public class StatisticsDataMenu {

    public static void statisticsMainMenu() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("1.Person Age Higher And Lower Stats");
        System.out.println("2.Number Of Dead People");
        System.out.println("3.Gender Seperation");

        System.out.print("Select : ");

        int number = sc.nextInt();
        if (number == 1) {
            higherAndLowerAgeCounter();

        } else if (number == 2) {
            deathCounter();
        } else if (number == 3) {
            genderSeperator();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    private static void higherAndLowerAgeCounter() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.print("Please Enter The Age : ");
        int age = sc.nextInt();
        AgeCounter.counter(age);
        System.out.println("====================================================");
        System.out.println("Your Data Found Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    private static void deathCounter() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        DeathCounter.main(null);

        System.out.println("====================================================");
        System.out.println("Your Data Found Succesfully ! ");
        System.out.println("1.Main Menu");
        System.out.println("2.Exit");
        System.out.print("Select : ");
        int javabe2 = sc.nextInt();
        if (javabe2 == 1) {
            Intro.mainMenu();
        }

        // * a menu should be added for add data again or comeback

        sc.close();

    }

    private static void genderSeperator() {
        Scanner sc = new Scanner(System.in);
        // * Clears the command prompt \

        SystemClear.main();
        System.out.println("====================================================");
        System.out.println("1.Male");
        System.out.println("2.Female");
        System.out.print("Select: ");
        int input = sc.nextInt();
        if (input == 1) {
            List<String> maleBlocks = GenderBlockRetriever.retrieveBlocksByGender("male");
            System.out.println("Male blocks:\n" + maleBlocks);

            System.out.println("====================================================");
            System.out.println("Your Data Found Succesfully ! ");
            System.out.println("1.Main Menu");
            System.out.println("2.Exit");
            System.out.print("Select : ");
            int javabe2 = sc.nextInt();
            if (javabe2 == 1) {
                Intro.mainMenu();
            }

        }

        else {
            List<String> femaleBlocks = GenderBlockRetriever.retrieveBlocksByGender("female");
            System.out.println("Female blocks:\n" + femaleBlocks);

            System.out.println("====================================================");
            System.out.println("Your Data Found Succesfully ! ");
            System.out.println("1.Main Menu");
            System.out.println("2.Exit");
            System.out.print("Select : ");
            int javabe2 = sc.nextInt();
            if (javabe2 == 1) {
                Intro.mainMenu();
            }
        }
        // * a menu should be added for add data again or comeback

        sc.close();

    }

}


package statistics;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class AgeCounter {
    public static void counter(int age) {

        int countHigher = 0;
        int countLower = 0;

        try (BufferedReader reader = new BufferedReader(new FileReader("database/user.txt"))) {
            String line;
            boolean isBlock = false;

            while ((line = reader.readLine()) != null) {
                if (line.equals("====================")) {
                    isBlock = !isBlock;
                    continue;
                }

                if (isBlock) {
                    if (line.startsWith("age=")) {
                        int blockAge = Integer.parseInt(line.substring(4));
                        if (blockAge > age) {
                            countHigher++;
                        } else if (blockAge < age) {
                            countLower++;
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("Number of blocks with age higher than " + age + ": " + countHigher);
        System.out.println("Number of blocks with age lower than " + age + ": " + countLower);
    }
}


package statistics;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class DeathCounter {

    public static void main(String[] args) {
        int count = countBlocksWithDateOfDeath();
        System.out.println("Number of blocks with date of death: " + count);
    }

    public static int countBlocksWithDateOfDeath() {
        int count = 0;
        try (BufferedReader br = new BufferedReader(new FileReader("database/user.txt"))) {
            String line;
            StringBuilder block = new StringBuilder();
            while ((line = br.readLine()) != null) {
                if (line.equals("====================")) {
                    if (block.toString().contains("dateofdeath=")) {
                        count++;
                    }
                    block = new StringBuilder();
                } else {
                    block.append(line).append(System.lineSeparator());
                }
            }
            // Check for the last block in case it doesn't have a closing delimiter
            if (block.toString().contains("dateofdeath=")) {
                count++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return count;
    }
}


package statistics;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class GenderBlockRetriever {

    public static List<String> retrieveBlocksByGender(String gender) {
        List<String> blocks = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("database/user.txt"))) {
            String line;
            StringBuilder block = new StringBuilder();
            while ((line = br.readLine()) != null) {
                if (line.equals("====================")) {
                    if (block.toString().contains("sex=" + gender)) {
                        blocks.add(block.toString());
                    }
                    block = new StringBuilder();
                } else {
                    block.append(line).append(System.lineSeparator());
                }
            }
            // Check for the last block in case it doesn't have a closing delimiter
            if (block.toString().contains("sex=" + gender)) {
                blocks.add(block.toString());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return blocks;
    }
}


package utils.editors;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class NatureEditor {

    public static void editNature(String ssn, Map<String, String> newData) throws IOException {
        String filePath = "database/lands.txt";
        List<String> fileLines = readFileLines(filePath);

        List<String> updatedFileLines = new ArrayList<>();
        StringBuilder currentBlock = new StringBuilder();
        boolean foundBlock = false;

        for (String line : fileLines) {
            if (line.startsWith("ssn=" + ssn)) {
                foundBlock = true;
            }

            if (line.equals("====================")) {
                if (foundBlock) {
                    updateBlockData(currentBlock, newData);
                    foundBlock = false;
                }
                updatedFileLines.add(currentBlock.toString());
                updatedFileLines.add(line);
                currentBlock.setLength(0);
            } else {
                currentBlock.append(line).append(System.lineSeparator());
            }
        }

        writeFileLines(filePath, updatedFileLines);
    }

    private static void updateBlockData(StringBuilder blockData, Map<String, String> newData) {
        String[] lines = blockData.toString().split(System.lineSeparator());
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            for (Map.Entry<String, String> entry : newData.entrySet()) {
                String key = entry.getKey();
                if (line.startsWith(key + "=")) {
                    lines[i] = key + "=" + entry.getValue();
                    break;
                }
            }
        }
        blockData.setLength(0);
        for (String line : lines) {
            blockData.append(line).append(System.lineSeparator());
        }
    }

    private static List<String> readFileLines(String filePath) throws IOException {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }

        return lines;
    }

    private static void writeFileLines(String filePath, List<String> lines) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
        }
    }

}

package utils.editors;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class PersonEditor {

    public static void editPerson(String ssn, Map<String, String> newData) throws IOException {
        String filePath = "database/user.txt";
        List<String> fileLines = readFileLines(filePath);

        List<String> updatedFileLines = new ArrayList<>();
        StringBuilder currentBlock = new StringBuilder();
        boolean foundBlock = false;

        for (String line : fileLines) {
            if (line.startsWith("ssn=" + ssn)) {
                foundBlock = true;
            }

            if (line.equals("====================")) {
                if (foundBlock) {
                    updateBlockData(currentBlock, newData);
                    foundBlock = false;
                }
                updatedFileLines.add(currentBlock.toString());
                updatedFileLines.add(line);
                currentBlock.setLength(0);
            } else {
                currentBlock.append(line).append(System.lineSeparator());
            }
        }

        writeFileLines(filePath, updatedFileLines);
    }

    private static void updateBlockData(StringBuilder blockData, Map<String, String> newData) {
        String[] lines = blockData.toString().split(System.lineSeparator());
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            for (Map.Entry<String, String> entry : newData.entrySet()) {
                String key = entry.getKey();
                if (line.startsWith(key + "=")) {
                    lines[i] = key + "=" + entry.getValue();
                    break;
                }
            }
        }
        blockData.setLength(0);
        for (String line : lines) {
            blockData.append(line).append(System.lineSeparator());
        }
    }

    private static List<String> readFileLines(String filePath) throws IOException {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }

        return lines;
    }

    private static void writeFileLines(String filePath, List<String> lines) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
        }
    }

}

package utils.Retrievers;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NatureRetriever {

    public static Map<String, String> retrievePersonData(String ssn) throws IOException {
        String filePath = "database/lands.txt";
        List<String> fileLines = readFileLines(filePath);

        Map<String, String> personData = new HashMap<>();
        StringBuilder currentBlock = new StringBuilder();
        boolean foundBlock = false;

        for (String line : fileLines) {
            if (line.startsWith("ssn=" + ssn)) {
                foundBlock = true;
            }

            if (line.equals("====================")) {
                if (foundBlock) {
                    personData = parseBlockData(currentBlock.toString());
                    break;
                }
                currentBlock.setLength(0);
            } else {
                currentBlock.append(line).append(System.lineSeparator());
            }
        }

        return personData;
    }

    private static Map<String, String> parseBlockData(String blockData) {
        Map<String, String> personData = new HashMap<>();
        String[] lines = blockData.split(System.lineSeparator());
        for (String line : lines) {
            String[] parts = line.split("=");
            if (parts.length == 2) {
                String key = parts[0].trim();
                String value = parts[1].trim();
                personData.put(key, value);
            }
        }
        return personData;
    }

    private static List<String> readFileLines(String filePath) throws IOException {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }

        return lines;
    }

}

package utils.Retrievers;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonRetriever {

    public static Map<String, String> retrievePersonData(String ssn) throws IOException {
        String filePath = "database/user.txt";
        List<String> fileLines = readFileLines(filePath);

        Map<String, String> personData = new HashMap<>();
        StringBuilder currentBlock = new StringBuilder();
        boolean foundBlock = false;

        for (String line : fileLines) {
            if (line.startsWith("ssn=" + ssn)) {
                foundBlock = true;
            }

            if (line.equals("====================")) {
                if (foundBlock) {
                    personData = parseBlockData(currentBlock.toString());
                    break;
                }
                currentBlock.setLength(0);
            } else {
                currentBlock.append(line).append(System.lineSeparator());
            }
        }

        return personData;
    }

    private static Map<String, String> parseBlockData(String blockData) {
        Map<String, String> personData = new HashMap<>();
        String[] lines = blockData.split(System.lineSeparator());
        for (String line : lines) {
            String[] parts = line.split("=");
            if (parts.length == 2) {
                String key = parts[0].trim();
                String value = parts[1].trim();
                personData.put(key, value);
            }
        }
        return personData;
    }

    private static List<String> readFileLines(String filePath) throws IOException {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }

        return lines;
    }

}


package utils;

import java.util.Map;
import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.io.FileReader;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.PrintWriter;

public class DataAppender {
    public DataAppender(Map<String, String> map, String filePath, String separator) throws IOException {
        try (PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(filePath, true)))) {
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                String value = entry.getValue();
                writer.println(key + separator + value);
            }
            writer.println(separator + "==================" + separator); // separator between maps
        }
    }

}


package utils;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class DataCollector {

    public static String getRandomDataFromFile(String filePath) throws IOException {
        List<String> lines = readAllLines(filePath);

        if (!lines.isEmpty()) {
            Random random = new Random();
            int index = random.nextInt(lines.size());
            return lines.get(index);
        }

        return null;
    }

    public static List<String> collectRandomDataFromFiles(List<String> fileNames) throws IOException {
        List<String> randomDataList = new ArrayList<>();

        for (String fileName : fileNames) {
            String filePath = "randomData/person/" + fileName + ".txt"; // Replace with the actual directory path
            String randomData = getRandomDataFromFile(filePath);

            if (randomData != null) {
                randomDataList.add(randomData);
            }
        }

        return randomDataList;
    }

    public static void main(String[] args) {
        List<String> fileNames = List.of(
                "address",
                "age",
                "city",
                "job",
                "lastname",
                "name",
                "nation",
                "sex",
                "ssn");

        try {
            List<String> randomDataList = collectRandomDataFromFiles(fileNames);
            System.out.println("Random Data:");
            for (String randomData : randomDataList) {
                System.out.println(randomData);
            }
        } catch (IOException e) {
            System.out.println("Error collecting random data: " + e.getMessage());
        }
    }

    private static List<String> readAllLines(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        return Files.readAllLines(path);
    }
}


package utils;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class DateOfDeathAdder {

    public static void addDateOfDeath(String ssn, String dateOfDeath) throws IOException {
        String filePath = "database/user.txt";
        List<String> fileLines = readFileLines(filePath);
        int blockStartIndex = findBlockStartIndex(fileLines, ssn);

        if (blockStartIndex != -1) {
            String blockSeparator = "====================";
            int blockEndIndex = findBlockEndIndex(fileLines, blockStartIndex + 1, blockSeparator);

            if (blockEndIndex != -1) {
                fileLines.add(blockEndIndex, "dateofdeath=" + dateOfDeath);
                writeFileLines(filePath, fileLines);
                System.out.println("Date of death added successfully.");
            } else {
                System.out.println("Block end not found for the given SSN.");
            }
        } else {
            System.out.println("Block start not found for the given SSN.");
        }
    }

    private static int findBlockStartIndex(List<String> lines, String ssn) {
        for (int i = 0; i < lines.size(); i++) {
            if (lines.get(i).startsWith("ssn=" + ssn)) {
                return i;
            }
        }
        return -1;
    }

    private static int findBlockEndIndex(List<String> lines, int startIndex, String blockSeparator) {
        for (int i = startIndex; i < lines.size(); i++) {
            if (lines.get(i).equals(blockSeparator)) {
                return i;
            }
        }
        return -1;
    }

    private static List<String> readFileLines(String filePath) throws IOException {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }

        return lines;
    }

    private static void writeFileLines(String filePath, List<String> lines) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
        }
    }

}


package utils;

import java.util.Map;
import java.util.HashMap;
import java.io.IOException;
import java.io.FileReader;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;

public class DuplicateSsn {
    public static boolean isDuplicateSSN(String filePath, String ssnToCheck) throws IOException {
        List<Map<String, String>> maps = readMapsFromFile(filePath);

        for (Map<String, String> map : maps) {
            String ssn = map.get("ssn");
            if (ssn != null && ssn.equals(ssnToCheck)) {
                return true; // Found a duplicate SSN
            }
        }

        return false; // No duplicate SSN found
    }

    public static List<Map<String, String>> readMapsFromFile(String filePath) throws IOException {
        List<Map<String, String>> maps = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            Map<String, String> currentMap = new HashMap<>();

            while ((line = reader.readLine()) != null) {
                line = line.trim(); // Remove leading/trailing whitespace

                if (line.equals("====================")) {
                    // End of current map entry, add it to the list
                    maps.add(currentMap);
                    currentMap = new HashMap<>();
                } else {
                    // Split the line into key-value pairs and add them to the current map
                    String[] parts = line.split("=", 2);
                    if (parts.length == 2) {
                        String key = parts[0];
                        String value = parts[1];
                        currentMap.put(key, value);
                    }
                }
            }

            // Add the last map to the list if it is not empty
            if (!currentMap.isEmpty()) {
                maps.add(currentMap);
            }
        }

        return maps;
    }

    public static Boolean checker(String ssn) {
        boolean action;

        try {
            String filePath = "database/user.txt";
            boolean isDuplicate = isDuplicateSSN(filePath, ssn);
            if (isDuplicate) {
                return true;
            } else {
                return false;
            }
        } catch (IOException e) {
            System.err.println("An error occurred while reading the maps from the file: " + e.getMessage());
        }
        return true;

    }

    public static Boolean codeChecker(String ssn) {
        boolean action;

        try {
            String filePath = "database/lands.txt";
            boolean isDuplicate = isDuplicateSSN(filePath, ssn);
            if (isDuplicate) {
                return true;
            } else {
                return false;
            }
        } catch (IOException e) {
            System.err.println("An error occurred while reading the maps from the file: " + e.getMessage());
        }
        return true;

    }
}


package utils;

import java.io.IOException;

public class SystemClear {
    public static void main() {
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                System.out.print("\033[H\033[2J");
                System.out.flush();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
